{"version":3,"sources":["../../src/with-modal.tsx","../../src/hooks/use-boolean.tsx","../../src/types.ts","../../src/util.tsx","../../src/with-table.tsx","../../src/components/table-searcher.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Modal, ModalProps, Form, FormInstance } from \"antd\";\nimport { identity, isEmpty } from \"lodash-es\";\nimport useBoolean from \"./hooks/use-boolean\";\nimport { FormMode, PlainObject } from \"./types\";\nimport { getDisplayName } from \"./util\";\n\nexport const useModalRef = <InitialValue extends PlainObject>() => {\n  return useRef<withModalRef<InitialValue>>(null);\n};\n\ntype Title = ModalProps[\"title\"];\n\ninterface withModalRef<InitialValue> {\n  open: (openProps: {\n    title: Title;\n    initialValue?: Partial<InitialValue>;\n    mode?: FormMode;\n    record?: PlainObject;\n  }) => void;\n}\n\nexport const withModal = <FormVal extends PlainObject>(\n  props?: Partial<Omit<ModalProps, \"title\">> & {\n    submit?: (params: {\n      mode: FormMode;\n      data: FormVal;\n      record: PlainObject;\n    }) => Promise<void>;\n    onError?: VoidFunction;\n  }\n) => {\n  const {\n    cancelText,\n    okText,\n    onError,\n    onOk,\n    onCancel,\n    destroyOnClose = true,\n    submit,\n    ...nestProps\n  } = props ?? {};\n\n  return (\n    FormComponent: React.ComponentType<{\n      form: FormInstance;\n      mode: FormMode;\n      data: Partial<FormVal>;\n    }>\n  ) => {\n    const WrappedFormComponent = forwardRef<withModalRef<FormVal>>((_, ref) => {\n      const [title, setTitle] = useState<Title>();\n      const [mode, setMode] = useState<FormMode>(FormMode.View);\n      const [value, setValue] = useState<Partial<FormVal>>();\n      const [record, setRecord] = useState<PlainObject>({});\n      const confirmLoading = useBoolean();\n      const visible = useBoolean();\n      const [form] = Form.useForm();\n\n      const readOnly = useMemo(() => {\n        return mode === FormMode.View;\n      }, [mode]);\n\n      useImperativeHandle(ref, () => ({\n        open: (openProps) => {\n          const { title, initialValue, mode, record = {} } = openProps;\n          if (!isEmpty(initialValue)) {\n            setValue(initialValue);\n            form.setFieldsValue(initialValue);\n          }\n          setRecord(record);\n          if (mode) {\n            setMode(mode);\n          }\n          setTitle(title);\n          visible.setTrue();\n        },\n      }));\n\n      return (\n        <Modal\n          title={title}\n          open={visible.state}\n          okText={okText}\n          onCancel={(e) => {\n            onCancel?.(e);\n            visible.setFalse();\n          }}\n          okButtonProps={{\n            style: { display: readOnly ? \"none\" : \"inline-block\" },\n          }}\n          cancelButtonProps={{ type: readOnly ? \"primary\" : \"default\" }}\n          onOk={async (e) => {\n            confirmLoading.setTrue();\n            const { errorFields } = await form.validateFields().catch(identity);\n            if (errorFields) {\n              confirmLoading.setFalse();\n              return;\n            }\n            submit?.({ mode, data: form.getFieldsValue(), record })\n              .then(() => {\n                confirmLoading.setFalse();\n                onOk?.(e);\n              })\n              .catch(() => {\n                onError?.();\n              });\n          }}\n          destroyOnClose={destroyOnClose}\n          confirmLoading={confirmLoading.state}\n          cancelText={cancelText}\n          {...nestProps}\n        >\n          <FormComponent form={form} mode={mode} data={value ?? {}} />\n        </Modal>\n      );\n    });\n\n    WrappedFormComponent.displayName = `withModal(${getDisplayName(\n      FormComponent\n    )})`;\n\n    return WrappedFormComponent;\n  };\n};\n","/** https://usehooks-ts.com/react-hook/use-boolean */\nimport { Dispatch, SetStateAction, useCallback, useState } from \"react\";\n\ninterface UseBooleanOutput {\n  state: boolean;\n  setValue: Dispatch<SetStateAction<boolean>>;\n  setTrue: () => void;\n  setFalse: () => void;\n  toggle: () => void;\n}\n\nfunction useBoolean(defaultValue?: boolean): UseBooleanOutput {\n  const [state, setValue] = useState(!!defaultValue);\n\n  const setTrue = useCallback(() => setValue(true), []);\n  const setFalse = useCallback(() => setValue(false), []);\n  const toggle = useCallback(() => setValue((x) => !x), []);\n\n  return { state, setValue, setTrue, setFalse, toggle };\n}\n\nexport default useBoolean;\n","export interface PlainObject {\n  [key: string]: unknown;\n}\n\nexport enum FormMode {\n  View = \"view\",\n  Copy = \"copy\",\n  Add = \"add\",\n  Edit = \"edit\",\n}\n","import { PlainObject } from \"./types\";\nimport { isNil } from \"lodash-es\";\n\nexport const getDisplayName = <Props extends PlainObject>(\n  Component: React.ComponentType<Props>\n) => {\n  return Component.displayName || Component.name || \"Component\";\n};\n\nexport const filterNonEmpty = <T extends PlainObject>(obj: T): Partial<T> => {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([_, v]) => !isNil(v))\n  ) as Partial<T>;\n};\n","import { Form, FormInstance, Table, TableProps } from \"antd\";\nimport {\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\";\nimport { FilterValue, SorterResult } from \"antd/es/table/interface\";\nimport { pick } from \"lodash-es\";\nimport useBoolean from \"./hooks/use-boolean\";\nimport React from \"react\";\nimport TableSearcher from \"./components/table-searcher\";\nimport { PlainObject } from \"./types\";\nimport { filterNonEmpty } from \"./util\";\n\nexport const useTableRef = () => {\n  return useRef<withTableRef>(null);\n};\n\ninterface ServiceResponse<Item> {\n  total: number;\n  list: Item[];\n}\n\ninterface Pagination {\n  current: number;\n  pageSize: number;\n  total?: number;\n}\n\ninterface ServiceParams<RecordType> extends Pagination {\n  extra: PlainObject;\n  filters?: Record<string, FilterValue | null>;\n  sorter?: SorterResult<RecordType> | SorterResult<RecordType>[];\n}\n\ninterface Service<RecordType> {\n  (params: ServiceParams<RecordType>): Promise<ServiceResponse<RecordType>>;\n}\n\ntype FetchData<RecordType> = (params?: ServiceParams<RecordType>) => void;\n\ninterface withTableRef {\n  refresh: () => void;\n}\n\nexport const withTable = <RecordType extends PlainObject>(props: {\n  pageSize?: number;\n  service: Service<RecordType>;\n  FormComponent?: React.ComponentType<{\n    form: FormInstance;\n  }>;\n}) => {\n  const { pageSize = 10, service, FormComponent } = props;\n  const DefaultPagination: Pagination = {\n    current: 1,\n    pageSize,\n    total: pageSize,\n  };\n  const loading = useBoolean();\n  const resetLoading = useBoolean();\n  const searchLoading = useBoolean();\n  const [form] = Form.useForm();\n  const [data, setData] = useState<RecordType[]>();\n  const [formVal, setFormVal] = useState<PlainObject>({});\n  const [pagination, setPagination] = useState<Pagination>(DefaultPagination);\n  const [filterVal, setFilterVal] =\n    useState<ServiceParams<RecordType>[\"filters\"]>();\n  const [sorterVal, setSorterVal] =\n    useState<ServiceParams<RecordType>[\"sorter\"]>();\n\n  const fetchData: FetchData<RecordType> = (params) => {\n    const {\n      current = DefaultPagination.current,\n      pageSize = DefaultPagination.pageSize,\n      filters,\n      sorter,\n      extra = {},\n    } = params ?? {};\n\n    service({\n      current,\n      pageSize,\n      filters,\n      sorter,\n      extra,\n    }).then(({ total, list }) => {\n      setData(list);\n      setPagination((pagination) => ({ ...pagination, total }));\n      loading.setFalse();\n      searchLoading.setFalse();\n      resetLoading.setFalse();\n    });\n  };\n\n  useEffect(() => {\n    loading.setTrue();\n    fetchData({\n      ...pagination,\n      filters: filterVal,\n      sorter: sorterVal,\n      extra: formVal,\n    });\n  }, [formVal, pagination.current, pagination.pageSize, sorterVal, filterVal]);\n\n  const TablePlus = forwardRef<\n    withTableRef,\n    Omit<\n      TableProps<RecordType>,\n      \"dataSource\" | \"pagination\" | \"onChange\" | \"loading\"\n    >\n  >((TablePlusProps, ref) => {\n    const { rowKey = \"id\", sticky = true, ...nestProps } = TablePlusProps;\n\n    const reset = () => {\n      resetLoading.setTrue();\n      setPagination((pagination) => ({ ...pagination, current: 1 }));\n      form.resetFields();\n      setFormVal({});\n    };\n\n    const search = () => {\n      searchLoading.setTrue();\n      setPagination((pagination) => ({ ...pagination, current: 1 }));\n      setFormVal(filterNonEmpty(form.getFieldsValue()));\n    };\n\n    useImperativeHandle(ref, () => ({\n      refresh() {\n        loading.setTrue();\n        fetchData({\n          ...pagination,\n          current: 1,\n          filters: filterVal,\n          sorter: sorterVal,\n          extra: formVal,\n        });\n      },\n    }));\n\n    return (\n      <div>\n        {FormComponent && (\n          <TableSearcher\n            FormComponent={<FormComponent form={form} />}\n            searchLoading={searchLoading.state}\n            resetLoading={resetLoading.state}\n            reset={reset}\n            search={search}\n          />\n        )}\n        <Table<RecordType>\n          {...nestProps}\n          rowKey={rowKey}\n          sticky={sticky}\n          loading={loading.state}\n          dataSource={data}\n          pagination={{ ...pagination, showQuickJumper: true }}\n          onChange={(pagination, filters, sorter, { action }) => {\n            if (action === \"filter\") {\n              setFilterVal(filters);\n            }\n            if (action === \"sort\") {\n              setSorterVal(sorter);\n            }\n            setPagination(\n              pick(pagination, [\"current\", \"pageSize\", \"total\"]) as Pagination\n            );\n          }}\n        />\n      </div>\n    );\n  });\n\n  return TablePlus;\n};\n","import { ReloadOutlined, SearchOutlined } from \"@ant-design/icons\";\nimport { Button, Col, Row, Space, Tooltip } from \"antd\";\nimport React from \"react\";\nimport useBoolean from \"../hooks/use-boolean\";\n\ninterface TablePlusSearcher {\n  search: () => void;\n  reset: () => void;\n  FormComponent: React.ReactElement;\n  resetLoading: boolean;\n  searchLoading: boolean;\n}\n\nconst TableSearcher: React.FC<TablePlusSearcher> = (props) => {\n  const { search, reset, FormComponent, resetLoading, searchLoading } = props;\n  const fold = useBoolean();\n  return (\n    <Row justify={\"space-between\"} gutter={8} wrap={false}>\n      <Col flex={1}>{FormComponent}</Col>\n      <Col flex={0}>\n        <Space align=\"start\">\n          <Tooltip title=\"查询\">\n            <Button\n              loading={searchLoading}\n              type=\"primary\"\n              icon={<SearchOutlined />}\n              onClick={() => {\n                search();\n              }}\n            />\n          </Tooltip>\n          <Space direction=\"vertical\">\n            <Tooltip title=\"重置\">\n              <Button\n                loading={resetLoading}\n                icon={<ReloadOutlined />}\n                onClick={() => {\n                  reset();\n                }}\n              />\n            </Tooltip>\n            {/* <Tooltip title={fold.state ? '收起' : '展开'}>\n              <Button\n                type=\"dashed\"\n                icon={fold.state ? <UpOutlined /> : <DownOutlined />}\n                onClick={() => {\n                  fold.toggle();\n                }}\n              />\n            </Tooltip> */}\n          </Space>\n        </Space>\n      </Col>\n    </Row>\n  );\n};\nexport default TableSearcher;\n"],"mappings":"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","names":["useState","FormMode","useState","title","mode","record","Form","forwardRef","useImperativeHandle","useRef","useState","jsx","jsx","jsxs","useRef","Form","useState","pageSize","pagination","forwardRef","useImperativeHandle"]}